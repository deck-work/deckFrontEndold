{"version":3,"file":"static/js/319.bb863319.chunk.js","mappings":"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","sources":["component/loadingModel.js","component/importedModel.js","component/Drag.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport FadeLoader from \"react-spinners/FadeLoader\";\r\nimport './loadingModel.scss';\r\n\r\nfunction LoadingModal({ handleCloseModal }) {\r\n    const [loading, setLoading] = useState(true);\r\n  \r\n    return (\r\n      <div className=\"loading-modal\">\r\n        <div className=\"progress-container\">\r\n          <FadeLoader\r\n            color=\"black\"\r\n            loading={loading}\r\n            size={100}\r\n            // aria-label=\"Loading Spinner\"\r\n            // data-testid=\"loader\"\r\n          />\r\n        </div>\r\n        <div className=\"importing\">\r\n        <h6>Importing presentation...</h6>\r\n        </div>\r\n        {/* <button\r\n          className=\"cancel-button\"\r\n          onClick={handleCloseModal}\r\n        >\r\n          Cancel\r\n        </button> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default LoadingModal;\r\n  ","import {React ,useState} from \"react\";\r\nimport './importedModel.scss'\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n\r\nfunction ImportedModal({ handleCloseModal,data}) {\r\n  // if(!)\r\n  const navigate = useNavigate();\r\n  console.log(\"datraaa\",data)\r\n  const [isImported, setImported] = useState(false);\r\n  function handleClick(){\r\n\r\n    navigate(`/presentation?userId=${data.userId}&deckId=${data.deckId}`)\r\n  }\r\n  \r\n  // if (!visible) return null;\r\n  return (\r\n    <div className=\"imported-modal\">\r\n       <div className=\"imported-icon\">\r\n       {\r\n        !isImported ? (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"66\" fill=\"green\" class=\"bi bi-check-circle\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\r\n  <path d=\"M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z\"/>\r\n</svg>\r\n        ) : (\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"62\" height=\"70\" fill=\"red\" class=\"bi bi-x-circle\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\r\n  <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n</svg>\r\n        )\r\n       }\r\n       </div>\r\n       <div className=\"deck-heading\">\r\n       {!isImported ? (\r\n           <h6>Your deck was imported successfully</h6>\r\n         ) : (\r\n           <h6>We faced some issues while importing your deck</h6>\r\n         )}\r\n       </div>\r\n      <div className=\"imported-button\">\r\n      <button onClick={handleClick}>Open Deck</button>\r\n      {!isImported ? (\r\n           <p className=\"close-window-paragraph\" onClick={handleCloseModal}>\r\n           Close this window\r\n         </p>\r\n        ) : (\r\n          <div className=\"failed-button\">\r\n            <button onClick={handleCloseModal}>Try Again</button>\r\n            <p onClick={handleCloseModal} className=\"back\">Go Back</p>\r\n            </div>\r\n        )\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImportedModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport LoadingModal from \"./loadingModel\";\r\nimport ImportedModal from \"./importedModel\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { apiUrls } from \"../utils/apiUrls\";\r\nimport { callAPI } from \"../utils/apiUtils\";\r\nimport \"react-dropzone-uploader/dist/styles.css\";\r\nimport Dropzone from \"react-dropzone-uploader\";\r\nimport \"./Drag.scss\";\r\nconst Drag = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImported, setIsImported] = useState(false);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [uploadedFile, setUploadedFile] = useState(null);\r\n  const [SelectedDocUrl, setSelectedDocUrl] = useState(\"\");\r\n  const [showDoc, setShowDoc] = useState(false);\r\n  const [inputUrl, setInputUrl] = useState(\"\");\r\n  const [val, setVal] = useState([]);\r\n  const [file, setFile] = useState([]);\r\n  const [userId, setUserId] = useState();\r\n  const [deckId, setDeckId] = useState();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // specify upload params and url for your files\r\n  const getUploadParams = ({ meta }) => {\r\n    return { url: \"https://httpbin.org/post\" };\r\n  };\r\n\r\n  // called every time a file's `status` changes\r\n  const handleChangeStatus = ({ meta, file }, status) => {\r\n    if (status === \"done\") {\r\n      // File upload is done\r\n      setIsLoading(false); // Stop loading\r\n      setIsImported(false); // Mark as imported\r\n    } else if (status === \"uploading\") {\r\n      // File upload is in progress\r\n      setIsLoading(true); // Start loading\r\n    }\r\n    console.log(status, meta, file);\r\n  };\r\n\r\n  const handleSubmit = async (files) => {\r\n    const formdata = new FormData();\r\n    setIsLoading(true)\r\n    \r\n    let userId=localStorage.getItem(\"userId\")\r\n    formdata.append(\"file\", files[0].file);\r\n    formdata.append(\"userId\", userId);\r\n      let  headers={\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      }\r\n    const apiResponse = await callAPI(apiUrls.CONVERT, {}, \"POST\", formdata,{},headers);\r\n    console.log(apiResponse, \"apiiiiiiiii\");\r\n    if (apiResponse.status === 200) {\r\n      setIsImported(true)\r\n      setDeckId(apiResponse.data.deckId)\r\n      setIsShow(true)\r\n      \r\n      toast.success(apiResponse.data.message + \" \", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n      });\r\n    } else {\r\n      toast.error(apiResponse.data, {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n      });\r\n    }\r\n    console.log(apiResponse);\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setIsLoading(false); // Reset loading state\r\n    setIsImported(false); // Reset imported state\r\n    setUploadedFile(null);\r\n  };\r\n\r\n  \r\n  const handleDrop = (event) => {\r\n    event.preventDefault();\r\n    const files = event.dataTransfer.files;\r\n    // Handle the dropped files, e.g., upload or process them.\r\n    console.log(\"Dropped files:\", files);\r\n    // Display the first dropped file in the upload section\r\n    if (files.length > 0) {\r\n      setUploadedFile(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleFileSelect = async (event) => {\r\n    const files = event.target.files;\r\n    setFile(files);\r\n    console.log(\"Selected files:\", files);\r\n    const formdata = new FormData();\r\n    // data()\r\n    console.log(file, \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\r\n    formdata.append(\"file\", file[0]?.file);\r\n    const apiResponse = await callAPI(apiUrls.CONVERT, {}, \"POST\", formdata);\r\n    console.log(apiResponse, \"apiiiiiiiii\");\r\n    // Display the first selected file in the upload section\r\n    if (files.length > 0) {\r\n      setIsLoading(true); // Start uploading\r\n      // Simulate file upload process (replace setTimeout with actual upload process)\r\n      setTimeout(() => {\r\n        // After successful upload\r\n        setIsLoading(false); // Uploading done\r\n        setIsImported(true); // Mark as imported\r\n      }, 1000); // Replace 2000 with actual upload time\r\n    }\r\n  };\r\n\r\n  const handleRemoveFile = () => {\r\n    // Remove the uploaded file\r\n    setUploadedFile(null);\r\n    \r\n  };\r\n\r\n  const handleUploadClick = async (event) => {\r\n    // Trigger the file input click event\r\n\r\n    document.getElementById(\"file-input\").click();\r\n  };\r\n\r\n  const handleFetchDoc = () => {\r\n    // Check if the input URL is not empty\r\n    if (inputUrl) {\r\n      // setIsLoading(true); // Start loading\r\n      // Simulate loading process (replace setTimeout with actual import process)\r\n      setTimeout(() => {\r\n        setSelectedDocUrl(inputUrl);\r\n        setShowDoc(true);\r\n        setIsImported(true); // Mark as imported\r\n        setIsLoading(false); // Loading done\r\n      }, 2000); // Replace 2000 with actual loading time\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [isShow]);\r\n  \r\n  async function fetchData() {\r\n    const userId=localStorage.getItem(\"userId\")\r\n    setUserId(userId)\r\n    const apiResponse1 = await callAPI(apiUrls.GETFILE, {userId:userId}, \"GET\");\r\n    console.log(apiResponse1);\r\n    setVal(apiResponse1.data);\r\n  }\r\n  function handleImageClick(event){\r\n    // console.log(event.target.id)\r\n    setDeckId(event.target.id)\r\n    \r\n    navigate(`/presentation?userId=${userId}&deckId=${event.target.id}`)\r\n\r\n        //  {{<Link to={`/presentation/${1}`} className=\"deck-image\"> }}\r\n\r\n  }\r\n  const showModal=()=>{\r\n    setIsModalOpen(true)\r\n  }\r\n  const hideModal=()=>{\r\n    setIsModalOpen(false)\r\n\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"drag-container\">\r\n          <div>\r\n            <h2>Decks</h2>\r\n          </div>\r\n          <div className=\"deck-add-new\">\r\n            <button onClick={handleOpenModal}>\r\n              <h6>Add New</h6>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"deck-area\">\r\n        {/* <Link to={{\r\n          pathname: `/presentation/${userId}`,\r\n          state: { deckId: deckId} \r\n        }\r\n        } className=\"deck-image\"> */}\r\n            {val?.map((image, i) => (\r\n              <div key={image.id} className=\"deck-id\" \r\n              onClick={handleImageClick}\r\n              >\r\n                <img\r\n                  src={image.url}\r\n                  name=\"image\"\r\n                  alt={`Im`}\r\n                  id={image.id}\r\n                  value={image.id}\r\n                  className=\"deck-images\"\r\n                />\r\n                <p>{i + 1}</p>\r\n              </div>\r\n            ))}\r\n          {/* </Link> */}\r\n        </div>\r\n\r\n        {isModalOpen && (\r\n          <div\r\n            className=\"deck-model\"\r\n            onDrop={handleDrop}\r\n            onDragOver={(e) => e.preventDefault()} // Prevent default to allow drop\r\n          >\r\n            <div className=\"model-top\">\r\n              <div className=\"top-left\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"25\"\r\n                height=\"30\"\r\n                fill=\"black\"\r\n                class=\"bi bi-easel\"\r\n                viewBox=\"0 0 16 16\"\r\n              >\r\n                <path d=\"M8 0a.5.5 0 0 1 .473.337L9.046 2H14a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1h-1.85l1.323 3.837a.5.5 0 1 1-.946.326L11.092 11H8.5v3a.5.5 0 0 1-1 0v-3H4.908l-1.435 4.163a.5.5 0 1 1-.946-.326L3.85 11H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h4.954L7.527.337A.5.5 0 0 1 8 0zM2 3v7h12V3H2z\" />\r\n              </svg>\r\n              <span>Add New Deck</span>\r\n              </div>\r\n              <p onClick={handleCloseModal}>X</p>\r\n            </div>\r\n            <div className=\"model-drop\">\r\n              <div className=\"imageContainer\"></div>\r\n              \r\n              <Dropzone\r\n                getUploadParams={getUploadParams}\r\n                onChangeStatus={handleChangeStatus}\r\n                onSubmit={handleSubmit}\r\n                accept=\"application/pdf, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/vnd.google-apps.presentation\"\r\n              ></Dropzone>\r\n            </div>\r\n\r\n            {/* <div className=\"model-or\">or</div>\r\n            <div className=\"model-google\">Add google slides presentation</div>\r\n            <div className=\"model-google-import\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Paste google slides link here\"\r\n                value={inputUrl}\r\n                onChange={(e) => setInputUrl(e.target.value)}\r\n              />\r\n              <button\r\n                className=\"google-import\"\r\n                onClick={() => handleFetchDoc()}\r\n              >\r\n                Import\r\n              </button>\r\n            </div>\r\n            <div className=\"model-sure\">Make sure your presentation can be viewed by 'Anyone with link'</div> */}\r\n          </div>\r\n        )}\r\n\r\n        {isLoading && <LoadingModal handleCloseModal={handleCloseModal} />} \r\n        {/* loading model */}\r\n        {/* {console.log(\"xuz\",userId,deckId)} */}\r\n\r\n        \r\n        {isImported && <ImportedModal handleCloseModal={handleCloseModal} data={{userId:userId,deckId:deckId}} />}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Drag;\r\n"],"names":["_ref","handleCloseModal","_useState","useState","_useState2","_slicedToArray","loading","_jsxs","className","children","_jsx","FadeLoader","color","size","data","navigate","useNavigate","console","log","isImported","xmlns","width","height","fill","class","viewBox","d","onClick","concat","userId","deckId","isModalOpen","setIsModalOpen","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","setIsImported","_useState7","_useState8","isShow","setIsShow","_useState9","_useState10","setUploadedFile","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","val","setVal","_useState19","_useState20","_useState21","_useState22","setUserId","_useState23","_useState24","setDeckId","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","files","formdata","headers","apiResponse","wrap","_context","prev","next","FormData","localStorage","getItem","append","file","callAPI","apiUrls","CONVERT","sent","status","toast","success","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","stop","_x","apply","arguments","_fetchData","_callee4","apiResponse1","_context4","GETFILE","handleImageClick","event","target","id","useEffect","fetchData","_Fragment","map","image","i","src","url","name","alt","value","onDrop","preventDefault","dataTransfer","length","onDragOver","e","Dropzone","getUploadParams","meta","onChangeStatus","_ref2","onSubmit","accept","LoadingModal","ImportedModal"],"sourceRoot":""}